from PyQt5 import QtWidgets
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
import hashlib
import json


class CryptoWallet:
    def __init__(self):
        self.private_key, self.public_key = self.generate_keys()
        self.address = self.get_address()
        self.balance = 100  # Начальный баланс

    def generate_keys(self):
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048
        )
        public_key = private_key.public_key()
        return private_key, public_key

    def get_address(self):
        pub_key_pem = self.public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        return hashlib.sha256(pub_key_pem).hexdigest()[:40]

    def sign_transaction(self, data):
        data_bytes = json.dumps(data, sort_keys=True).encode()
        signature = self.private_key.sign(
            data_bytes,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        return signature.hex()

    def verify_signature(self, public_key, data, signature):
        try:
            data_bytes = json.dumps(data, sort_keys=True).encode()
            public_key.verify(
                bytes.fromhex(signature),
                data_bytes,
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            return True
        except Exception:
            return False


class WalletGUI(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.wallet = CryptoWallet()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Crypto Wallet")
        self.layout = QtWidgets.QVBoxLayout()

        self.balance_label = QtWidgets.QLabel(f"Balance: {self.wallet.balance} coins")
        self.layout.addWidget(self.balance_label)

        self.address_label = QtWidgets.QLabel(f"Address: {self.wallet.address}")
        self.layout.addWidget(self.address_label)

        self.recipient_input = QtWidgets.QLineEdit(self)
        self.recipient_input.setPlaceholderText("Recipient Address")
        self.layout.addWidget(self.recipient_input)

        self.amount_input = QtWidgets.QLineEdit(self)
        self.amount_input.setPlaceholderText("Amount")
        self.layout.addWidget(self.amount_input)

        self.send_button = QtWidgets.QPushButton("Send Transaction")
        self.send_button.clicked.connect(self.send_transaction)
        self.layout.addWidget(self.send_button)

        self.setLayout(self.layout)

    def send_transaction(self):
        recipient = self.recipient_input.text()
        amount = self.amount_input.text()

        try:
            amount = int(amount)
            if amount <= 0 or amount > self.wallet.balance:
                raise ValueError
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "Invalid transaction details!")
            return

        transaction = {
            "from": self.wallet.address,
            "to": recipient,
            "amount": amount
        }
        signature = self.wallet.sign_transaction(transaction)
        transaction["signature"] = signature
        self.wallet.balance -= amount
        self.balance_label.setText(f"Balance: {self.wallet.balance} coins")

        QtWidgets.QMessageBox.information(self, "Transaction Sent", json.dumps(transaction, indent=4))


if __name__ == "__main__":
    app = QtWidgets.QApplication([])
    wallet = WalletGUI()
    wallet.show()
    app.exec_()
